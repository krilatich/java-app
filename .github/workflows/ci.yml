# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-java:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Build and Push Docker Image
      uses: mr-smithers-excellent/docker-build-push@v6.2
      with:
        image: deetm/java-app
        tags: latest
        addLatest: true
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

  deploy:
    needs: build-java
    name: deploy image
    runs-on: ubuntu-latest

    steps:
    
    - name: Tag
      id: autotagger
      uses: butlerlogic/action-autotag@stable
      with:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    - name: Release
      id: create_release
      if: steps.autotagger.outputs.tagname != ''
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.autotagger.outputs.tagname }}
        release_name: Version ${{ steps.autotagger.outputs.version }}
        body: ${{ steps.autotagger.outputs.tagmessage }}
        draft: false
        prerelease: true
    
    - name: install ssh keys
      run: |
        install -m 600 -D /dev/null ~/.ssh/id_rsa
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.HOST }} > ~/.ssh/known_hosts
        
    - name: connect and pull
      run: ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} "cd java-app/ && docker-compose pull && docker-compose up -d && exit"
    - name: cleanup
      run: rm -rf ~/.ssh  

    - name: Rollback Release
      if: failure() && steps.create_release.outputs.id != ''
      uses: author/action-rollback@stable
      with:
        id: ${{ steps.create_release.id }}
        tag: ${{ steps.autotagger.outputs.tagname }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}     
        
  notify-telegram:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Notify in Telegram on success
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ✅ *Deployment Successful*

          Version: ${{ deploy.steps.autotagger.outputs.tagname }} 

    - name: Notify in Telegram on failure
      if: failure()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ❌ *Deployment Failed*

          Version: ${{ deploy.steps.autotagger.outputs.tagname }}   

      
         
